@page "/main"

<div class="flex flex-col h-screen justify-between">


    <div class="flex flex-col xl:justify-center lg:flex-row">

        <div class="flex lg:flex-col m-4 shadow-md">

            @if (game != null)
            {
                @foreach (var player in game.OtherPlayers(game.Players[0]))
                {
                    <PlayerCard Player="player" />
                }
            }
        </div>

        <Board Deck="game.Deck" OnDevelopmentClicked="DevelopmentClicked" />
        <MarketBoard Market="game.Market" OnGemClicked="GemClicked" />
        <NobilityBoard NobilityBox="game.NobilityBox" />
    </div>

    <GemsPanel @ref="gemsPanel" Game="game" OnGemsTaken="MoveMade" />
    <DevelopmentsPanel @ref="developmentsPanel" Game="game" OnDevelopmentTaken="MoveMade" />



    <footer class="h-30">
        <div class="">

            <MainPlayerCard Player="game.Players[0]" />
        </div>
        <div class="h-10">
            <MessagePanel Message="message" />
        </div>
    </footer>
</div>

@code {
    private MessageModel message;

    private Game game;

    private GemsPanel gemsPanel;
    private DevelopmentsPanel developmentsPanel;

    protected override void OnInitialized()
    {
        game = new Game(Prestige.FromScalar(15),
            (Avatars.Danilo, ColorFactory.Red),
            (Avatars.Debra, ColorFactory.Purple),
            (Avatars.Donnie, ColorFactory.Orange),
            (Avatars.Frankie, ColorFactory.Yellow));

        message = new MessageModel();
    }

    protected override async Task OnInitializedAsync()
    {
        message.Set($"begins playing", game.CurrentPlayer.ToString());
        await OnPlay();
    }

    public void GemClicked(Gem gem)
    {
        gemsPanel.AddGem(gem);
        gemsPanel.Show = true;
        developmentsPanel.Show = false;
    }

    public void DevelopmentClicked(Development development)
    {
        developmentsPanel.SetDevelopment(development);
        gemsPanel.Show = false;
        developmentsPanel.Show = true;
    }

    private async Task MoveMade(GameAction action)
    {
        message.Set(action.ToString(), game.CurrentPlayer.ToString());

        gemsPanel.Reset();

        gemsPanel.Show = false;
        developmentsPanel.Show = false;

        game.NextTurn();

        await OnPlay();
    }

    private async Task OnPlay()
    {
        while (!game.CurrentPlayer.IsHuman)
        {
            var moveService = new MoveService(game);
            var move = moveService.MakeMove();
            message.Set(move.ToString(), game.CurrentPlayer.ToString());
            StateHasChanged();

            await Task.Delay(2000);

            //Update players board

            //Show modal of player move

            game.NextTurn();
        }
        message.Set("Your turn");
    }
}
