
@if (development != null)
{
    <div class="flex items-center justify-center">

        <button type="submit" disabled="@(!canBeBought)" class="ml-8 hover:bg-indigo-700 font-semibold text-indigo-900
           hover:text-white py-1 px-4 border border-indigo-700 rounded-sm outline-none focus:outline-none @(AddStatusStyles(canBeBought))">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z">
                </path>
            </svg>
            Purchase
        </button>

        <button type="submit" disabled="@(!canBeReserved)" class="ml-8 hover:bg-indigo-700 font-semibold text-indigo-900
           hover:text-white py-1 px-4 border border-indigo-700 rounded-sm outline-none focus:outline-none @(AddStatusStyles(canBeReserved))">
            <svg class="w-6 h-6 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Reserve
        </button>

    </div>
}

@code {
    private Development development;

    private bool canBeBought = false;
    private bool canBeReserved = false;

    private string AddStatusStyles(bool status) => status ? "" : "opacity-50 cursor-not-allowed";

    [Parameter]
    public Game Game { get; set; }

    //[Parameter]
    //public EventCallback<GameAction> OnDevelopmentTaken { get; set; }

    //public void SetDevelopment(Development development)
    //{
    //    this.development = development;
    //    UpdateVisibility();
    //}

    //private void Purchase()
    //{
    //    var service = new PurchaseService(development, Game.CurrentPlayer);
    //    if (service.CanAffordPayingGold())
    //    {
    //        service.Purchase(Game.Deck, Game.Market);
    //        var action = new BuyDevelopment(development, null);
    //        OnDevelopmentTaken.InvokeAsync(action);
    //        development = null;
    //        canBeBought = canBeReserved = false;
    //    }
    //}

    //private void Reserve()
    //{
    //    var service = new ReserveService(development, Game.CurrentPlayer, Game.Market);
    //    if (service.CanReserve())
    //    {
    //        bool withGold = service.WouldTakeGoldToken();
    //        service.Reserve(Game.Deck);
    //        var action = new ReserveDevelopment(development, withGold, null);
    //        OnDevelopmentTaken.InvokeAsync(action);
    //        development = null;
    //        canBeBought = canBeReserved = false;
    //    }
    //}

    //private void UpdateVisibility()
    //{
    //    var purchaseService = new PurchaseService(development, Game.CurrentPlayer);
    //    canBeBought = purchaseService.CanAffordPayingGold();

    //    var reserveService = new ReserveService(development, Game.CurrentPlayer, Game.Market);
    //    canBeReserved = reserveService.CanReserve();
    //}
}
